<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.appt</groupId>
	<artifactId>appt</artifactId>
	<packaging>war</packaging>
	<version>1.0</version>
	<name>appt</name>
	<url>http://maven.apache.org</url>
  
  	<properties>
		<spring.version>4.1.1.RELEASE</spring.version>
		<junit.version>4.11</junit.version>
		<joda.version>2.3</joda.version>
		<log4j.version>1.2.17</log4j.version>
		<mysqlDriver.version>5.1.30</mysqlDriver.version>
	</properties>
	
	<dependencies>

		<!-- Spring Context -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- Spring Web -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
			<scope>compile</scope>
		</dependency>
		
		<!-- Spring Web MVC -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-webmvc</artifactId>
		    <version>${spring.version}</version>
		</dependency>

		<!-- Spring Test Support -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Spring Tx Support -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- Spring JDBC -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- MySQL Driver -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysqlDriver.version}</version>
		</dependency>

		<!-- Apache Commons -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>

		<!-- Apache BeanUtils -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.2</version>
		</dependency>
		
		<!-- Apache POI -->
		<dependency>
		    <groupId>org.apache.poi</groupId>
		    <artifactId>poi-ooxml</artifactId>
		    <version>3.11</version>
		</dependency>

		<!-- Joda -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>${joda.version}</version>
		</dependency>

		<!-- Log4J -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
		</dependency>

		<!-- Tiles JSP  -->
		<dependency>
		    <groupId>org.apache.tiles</groupId>
		    <artifactId>tiles-jsp</artifactId>
		    <version>2.2.2</version>
		</dependency>
  
  		<!-- slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.5.8</version>
		</dependency>

		<!-- jstl -->
		<dependency>
		      <groupId>javax.servlet</groupId>
		      <artifactId>jstl</artifactId>
		      <version>1.2</version>
		</dependency>

		<!-- Jackson JSON Processor -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		 	<version>2.4.1</version>
		</dependency>
    
		<!-- Junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<build>
		<finalName>appt</finalName>
		<plugins>
			  <!-- read local properties file -->	
      		  <plugin>
        		<groupId>org.codehaus.mojo</groupId>
        		<artifactId>properties-maven-plugin</artifactId>
        		<executions>
          			<execution>
            			<phase>initialize</phase>
            			<goals><goal>read-project-properties</goal></goals>
            			<configuration>
              				<files><file>${basedir}/src/test/resources/local.properties</file></files>
            			</configuration>
          			</execution>
        		</executions>
      		  </plugin>
      	
      		  <!-- compiler plugin -->
		      <plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-compiler-plugin</artifactId>
		        <version>3.2</version>
		        <!-- 
		        <configuration>
		          <source>1.7</source>
		          <target>1.7</target>
		        </configuration>
		        -->
		      </plugin>
      
			<!-- ignore unit tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.12.4</version>
				<configuration>
					<skipTests>true</skipTests>
				</configuration>
			</plugin>

			<!-- maven jar plugin (not used at the moment since war plugin is used)-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
				</configuration>
			</plugin>

			<!-- maven war plugin -->
			<plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-war-plugin</artifactId>
		        <version>2.4</version>
		        <configuration>
		        	<warName>${project.build.finalName}</warName>
		        	<!-- 
		        		This setting will include a jar of class in WEB-INF/lib vs. compiled classes in WEB-INF/classes
		        		<archiveClasses>true</archiveClasses> 
		        	-->
		        	<!-- This setting will create a jar of classes in addition to war -->
		        	<attachClasses>true</attachClasses>  
                	<classesClassifier>classes</classesClassifier>
                	<includeEmptyDirectories>true</includeEmptyDirectories>
            	</configuration>
		      </plugin>
		      
		      <plugin>
			        <groupId>org.apache.maven.plugins</groupId>
			        <artifactId>maven-dependency-plugin</artifactId>
			        <version>2.10</version>
			        <executions>
			          <execution>
			            <id>copy-dependencies</id>
			            <phase>package</phase>
			            <goals>
			              <goal>copy-dependencies</goal>
			            </goals>
			            <configuration>
			              <outputDirectory>${project.build.directory}/alternateLocation</outputDirectory>
			              <overWriteReleases>false</overWriteReleases>
			              <overWriteSnapshots>false</overWriteSnapshots>
			              <overWriteIfNewer>true</overWriteIfNewer>
			            </configuration>
			          </execution>
			        </executions>
			      </plugin>
      
      		<!-- tomcat 7 plugin -->
	      	<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<url>${tomcat.manager.url}</url>
					<server>TomcatServer</server>
					<path>/${webapp.name}</path>
					<username>${tomcat.username}</username>
                    <password>${tomcat.password}</password>
                    <update>true</update>
				</configuration>
			</plugin>
	
		</plugins>

		<!-- exclude properties files from being bundled in jar -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>**/*.properties</exclude>
				</excludes>
			</resource>
		</resources>
	</build>

</project>
